# Server port
server:
  port: 8091
  error:
    include-message: always # Útil para debugging

# Springdoc OpenAPI configuration
springdoc:
  # Habilita el endpoint agregado /v3/api-docs en el gateway (buena práctica tenerlo explícito)
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    urls:
      - name: Servicio Identidad
        url: /identity/v3/api-docs
      - name: Servicio Proyecto
        url: /project/v3/api-docs
      - name: Servicio Logs
        url: /log/v3/api-docs
      - name: Servicio Notificaciones
        url: /notification/v3/api-docs
      - name: Servicio Comentarios
        url: /comment/v3/api-docs
      - name: Servicio Task
        url: /task/v3/api-docs

# Spring Cloud Gateway configuration
spring:
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origins: "*"
            allowed-headers: "*"
            allowed-methods:
              - GET
              - POST
              - PUT
              - DELETE

      routes:
        # === RUTAS DE NEGOCIO ===
        # Authentication routes (Apuntan a 'identity')
        - id: authentication-service
          uri: lb://identity
          predicates:
            - Path=/api/auth/login
          filters:
            # Evita duplicados en cabeceras CORS si el micro-servicio también las añade
            - DedupeResponseHeader=Access-Control-Request-Method Access-Control-Allow-Origin Access-Control-Request-Headers, RETAIN_FIRST

        # Register routes (Apuntan a: 'identity')
        - id: register-first-step-service
          uri: lb://identity
          predicates:
            - Path=/api/user/register
        - id: register-second-step-service
          uri: lb://identity
          predicates:
            - Path=/api/user/register/code

        # Identity API routes (Ruta principal para la API de identidad)
        - id: identity-service
          uri: lb://identity
          predicates:
            - Path=/identity/api/**
          filters:
            - RewritePath=/identity(?<segment>/?.*), /$\{segment}
            - AuthFilter

        # Project API routes (Ruta principal para la API de proyecto)
        - id: project-service
          uri: lb://project
          predicates:
            - Path=/project/api/**
          filters:
            - RewritePath=/project(?<segment>/?.*), /$\{segment}
            - AuthFilter

        # Log API routes (Ruta principal para la API de log)
        - id: log-service
          uri: lb://log
          predicates:
            - Path=/log/api/**
          filters:
            - RewritePath=/log(?<segment>/?.*), /$\{segment}
            - AuthFilter

        # Notification API routes (Ruta principal para la API de notification)
        - id: notification-service
          uri: lb://notification
          predicates:
            - Path=/notification/api/**
          filters:
            - RewritePath=/notification(?<segment>/?.*), /$\{segment}
            - AuthFilter

        # Comment API routes (Ruta principal para la API de comentarios)
        - id: comment-service
          uri: lb://comment
          predicates:
            - Path=/comment/api/**
          filters:
            - RewritePath=/comment(?<segment>/?.*), /$\{segment}
            - AuthFilter

        # Task API routes (Ruta principal para la API de tareas)
        - id: task-service
          uri: lb://task
          predicates:
            - Path=/task/api/**
          filters:
            - RewritePath=/task(?<segment>/?.*), /$\{segment}
            - AuthFilter

        # === RUTAS PARA SWAGGER/OPENAPI DOCS ===
        # Estas rutas son necesarias porque los paths /v3/api-docs no son capturados por las rutas de API (/identity/api/**, /project/api/**)
        # Permiten que Swagger UI (a través de "springdoc.swagger-ui.urls") solicite las definiciones de cada micro-servicio.

        # Ruta para obtener la documentación OpenAPI del servicio 'identity'
        - id: identity-api-docs
          uri: lb://identity
          predicates:
            - Path=/identity/v3/api-docs/**
          filters:
            - RewritePath=/identity(?<segment>/?.*), /$\{segment}

        # Ruta para obtener la documentación OpenAPI del servicio 'project'
        - id: project-api-docs
          uri: lb://project
          predicates:
            - Path=/project/v3/api-docs/**
          filters:
            - RewritePath=/project(?<segment>/?.*), /$\{segment}

        # Ruta para obtener la documentación OpenAPI del servicio 'log'
        - id: log-api-docs
          uri: lb://log
          predicates:
            - Path=/log/v3/api-docs/**
          filters:
            - RewritePath=/log(?<segment>/?.*), /$\{segment}

        # Ruta para obtener la documentación OpenAPI del servicio 'notification'
        - id: notification-api-docs
          uri: lb://notification
          predicates:
            - Path=/notification/v3/api-docs/**
          filters:
            - RewritePath=/notification(?<segment>/?.*), /$\{segment}

        # Ruta para obtener la documentación OpenAPI del servicio 'comment'
        - id: comment-api-docs
          uri: lb://comment
          predicates:
            - Path=/comment/v3/api-docs/**
          filters:
            - RewritePath=/comment(?<segment>/?.*), /$\{segment}

        # Ruta para obtener la documentación OpenAPI del servicio 'task'
        - id: task-api-docs
          uri: lb://task
          predicates:
            - Path=/task/v3/api-docs/**
          filters:
            - RewritePath=/task(?<segment>/?.*), /$\{segment}

# Eureka client configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8099/eureka
  instance:
    prefer-ip-address: true

# Logging levels configuration (Mantener DEBUG durante el desarrollo/pruebas)
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    reactor.netty.http.client: DEBUG
    org.springdoc: DEBUG