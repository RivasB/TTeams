# Server port
server:
  port: 8091
  error:
    include-message: always # Útil para debugging

# Springdoc OpenAPI configuration
springdoc:
  # Habilita el endpoint agregado /v3/api-docs en el gateway (buena práctica tenerlo explícito)
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
    urls:
      - name: Servicio Identidad
        url: /identity/v3/api-docs
      - name: Servicio Proyecto
        url: /project/v3/api-docs
      - name: Servicio Logs
        url: /log/v3/api-docs

# Spring Cloud Gateway configuration
spring:
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowed-origins: "*"
            allowed-headers: "*"
            allowed-methods:
              - GET
              - POST
              - PUT
              - DELETE

      routes:
        # === RUTAS DE NEGOCIO ===
        # Authentication routes (Apuntan a 'identity')
        - id: authentication-service
          uri: lb://identity
          predicates:
            - Path=/api/auth/login
          filters:
            # Evita duplicados en cabeceras CORS si el microservicio también las añade
            - DedupeResponseHeader=Access-Control-Request-Method Access-Control-Allow-Origin Access-Control-Request-Headers, RETAIN_FIRST

        # Register routes (Apuntan a 'identity')
        - id: register-first-step-service
          uri: lb://identity
          predicates:
            - Path=/api/user/register
        - id: register-second-step-service
          uri: lb://identity
          predicates:
            - Path=/api/user/register/code

        # Identity API routes (Ruta principal para la API de identidad)
        - id: identity-service
          uri: lb://identity # Descubrimiento de servicio para 'identity'
          predicates:
            - Path=/identity/api/** # Captura todas las llamadas a /identity/api/...
          filters:
            # Reescribe /identity/api/foo -> /api/foo antes de enviar a 'identity'
            - RewritePath=/identity(?<segment>/?.*), /$\{segment}
            - AuthFilter # Aplica filtro de autenticación/autorización

        # Project API routes (Ruta principal para la API de proyecto)
        - id: project-service
          uri: lb://project # Descubrimiento de servicio para 'project'
          predicates:
            - Path=/project/api/** # Captura todas las llamadas a /project/api/...
          filters:
            # Reescribe /project/api/bar -> /api/bar antes de enviar a 'project'
            - RewritePath=/project(?<segment>/?.*), /$\{segment}
            - AuthFilter # Aplica filtro de autenticación/autorización

        # Log API routes (Ruta principal para la API de log)
        - id: log-service
          uri: lb://log # Descubrimiento de servicio para 'log'
          predicates:
            - Path=/log/api/** # Captura todas las llamadas a /log/api/...
          filters:
            # Reescribe /project/api/bar -> /api/bar antes de enviar a 'log'
            - RewritePath=/log(?<segment>/?.*), /$\{segment}
            - AuthFilter # Aplica filtro de autenticación/autorización

        # === RUTAS PARA SWAGGER/OPENAPI DOCS ===
        # Estas rutas son necesarias porque los paths /v3/api-docs no son capturados por las rutas de API (/identity/api/**, /project/api/**)
        # Permiten que Swagger UI (a través de springdoc.swagger-ui.urls) solicite las definiciones de cada microservicio.

        # Ruta para obtener la documentación OpenAPI del servicio 'identity'
        - id: identity-api-docs
          uri: lb://identity
          predicates:
            - Path=/identity/v3/api-docs/** # Coincide con la URL en springdoc.swagger-ui.urls
          filters:
            # Reescribe /identity/v3/api-docs -> /v3/api-docs antes de enviar a 'identity'
            - RewritePath=/identity(?<segment>/?.*), /$\{segment}

        # Ruta para obtener la documentación OpenAPI del servicio 'project'
        - id: project-api-docs
          uri: lb://project
          predicates:
            - Path=/project/v3/api-docs/** # Coincide con la URL en springdoc.swagger-ui.urls
          filters:
            # Reescribe /project/v3/api-docs -> /v3/api-docs antes de enviar a 'project'
            - RewritePath=/project(?<segment>/?.*), /$\{segment}

        # Ruta para obtener la documentación OpenAPI del servicio 'log'
        - id: log-api-docs
          uri: lb://log
          predicates:
            - Path=/log/v3/api-docs/** # Coincide con la URL en springdoc.swagger-ui.urls
          filters:
            # Reescribe /log/v3/api-docs -> /v3/api-docs antes de enviar a 'log'
            - RewritePath=/log(?<segment>/?.*), /$\{segment}

# Eureka client configuration
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8099/eureka
  instance:
    prefer-ip-address: true

# Logging levels configuration (Mantener DEBUG durante el desarrollo/pruebas)
logging:
  level:
    # Niveles DEBUG útiles para diagnosticar problemas de enrutamiento y configuración de springdoc
    org.springframework.cloud.gateway: DEBUG
    reactor.netty.http.client: DEBUG
    org.springdoc: DEBUG # Ver qué hace springdoc internamente